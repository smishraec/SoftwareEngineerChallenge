package testhello;

public class ImmutableQueue1<T> implements Queue<T> {

    private T[] arr;

    private int total, first, next;

    @SuppressWarnings("unchecked")
    public ImmutableQueue1()
    {
        arr = (T[]) new Object[2];
    }

    private void resize(int capacity)
    {
        @SuppressWarnings("unchecked")
        T[] tmp = (T[]) new Object[capacity];

        for (int i = 0; i < total; i++)
            tmp[i] = arr[(first + i) % arr.length];

        arr = tmp;
        first = 0;
        next = total;
    }


    @Override
    public Queue<T> enQueue(T t) {
        if (arr.length == total) resize(arr.length * 2);
        arr[next++] = t;
        if (next == arr.length) next = 0;
        total++;
        return this;
    }
    

    @SuppressWarnings("unchecked")
    @Override
    public Queue<T> deQueue() {
        if (total == 0) throw new java.util.NoSuchElementException();
        T ele = arr[first];
        arr[first] = null;
        if (++first == arr.length) first = 0;
        if (--total > 0 && total == arr.length / 4) resize(arr.length / 2);
        return (ImmutableQueue1<T>) ele;
    }


    @Override
    public T head() {

        if(isEmpty()) {
            
            System.out.println("program terminated");
        }
        return arr[0];
    }

    @Override
    public boolean isEmpty() {
        if(arr.length == 0) {
            return false;
        }        
        
        return true;
        
            }

}
